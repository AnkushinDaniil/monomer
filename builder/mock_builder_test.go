// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/polymerdao/monomer/builder (interfaces: Pool,TxStore,EventBus,Application,BlockStore)
//
// Generated by this command:
//
//	mockgen -destination mock_builder_test.go -package builder_test github.com/polymerdao/monomer/builder Pool,TxStore,EventBus,Application,BlockStore
//

// Package builder_test is a generated GoMock package.
package builder_test

import (
	context "context"
	reflect "reflect"

	types "github.com/cometbft/cometbft/abci/types"
	types0 "github.com/cometbft/cometbft/types"
	eth "github.com/ethereum-optimism/optimism/op-service/eth"
	common "github.com/ethereum/go-ethereum/common"
	monomer "github.com/polymerdao/monomer"
	gomock "go.uber.org/mock/gomock"
)

// MockPool is a mock of Pool interface.
type MockPool struct {
	ctrl     *gomock.Controller
	recorder *MockPoolMockRecorder
}

// MockPoolMockRecorder is the mock recorder for MockPool.
type MockPoolMockRecorder struct {
	mock *MockPool
}

// NewMockPool creates a new mock instance.
func NewMockPool(ctrl *gomock.Controller) *MockPool {
	mock := &MockPool{ctrl: ctrl}
	mock.recorder = &MockPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPool) EXPECT() *MockPoolMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockPool) Dequeue() (types0.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(types0.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockPoolMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockPool)(nil).Dequeue))
}

// Len mocks base method.
func (m *MockPool) Len() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockPoolMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockPool)(nil).Len))
}

// MockTxStore is a mock of TxStore interface.
type MockTxStore struct {
	ctrl     *gomock.Controller
	recorder *MockTxStoreMockRecorder
}

// MockTxStoreMockRecorder is the mock recorder for MockTxStore.
type MockTxStoreMockRecorder struct {
	mock *MockTxStore
}

// NewMockTxStore creates a new mock instance.
func NewMockTxStore(ctrl *gomock.Controller) *MockTxStore {
	mock := &MockTxStore{ctrl: ctrl}
	mock.recorder = &MockTxStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxStore) EXPECT() *MockTxStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTxStore) Add(arg0 []*types.TxResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTxStoreMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTxStore)(nil).Add), arg0)
}

// RollbackToHeight mocks base method.
func (m *MockTxStore) RollbackToHeight(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToHeight", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToHeight indicates an expected call of RollbackToHeight.
func (mr *MockTxStoreMockRecorder) RollbackToHeight(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToHeight", reflect.TypeOf((*MockTxStore)(nil).RollbackToHeight), arg0, arg1)
}

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// PublishEventTx mocks base method.
func (m *MockEventBus) PublishEventTx(arg0 types0.EventDataTx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEventTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEventTx indicates an expected call of PublishEventTx.
func (mr *MockEventBusMockRecorder) PublishEventTx(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEventTx", reflect.TypeOf((*MockEventBus)(nil).PublishEventTx), arg0)
}

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockApplication) Commit(arg0 context.Context, arg1 *types.RequestCommit) (*types.ResponseCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockApplicationMockRecorder) Commit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockApplication)(nil).Commit), arg0, arg1)
}

// FinalizeBlock mocks base method.
func (m *MockApplication) FinalizeBlock(arg0 context.Context, arg1 *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeBlock", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseFinalizeBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeBlock indicates an expected call of FinalizeBlock.
func (mr *MockApplicationMockRecorder) FinalizeBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeBlock", reflect.TypeOf((*MockApplication)(nil).FinalizeBlock), arg0, arg1)
}

// Info mocks base method.
func (m *MockApplication) Info(arg0 context.Context, arg1 *types.RequestInfo) (*types.ResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockApplicationMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApplication)(nil).Info), arg0, arg1)
}

// RollbackToHeight mocks base method.
func (m *MockApplication) RollbackToHeight(arg0 context.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToHeight", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToHeight indicates an expected call of RollbackToHeight.
func (mr *MockApplicationMockRecorder) RollbackToHeight(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToHeight", reflect.TypeOf((*MockApplication)(nil).RollbackToHeight), arg0, arg1)
}

// MockBlockStore is a mock of BlockStore interface.
type MockBlockStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockStoreMockRecorder
}

// MockBlockStoreMockRecorder is the mock recorder for MockBlockStore.
type MockBlockStoreMockRecorder struct {
	mock *MockBlockStore
}

// NewMockBlockStore creates a new mock instance.
func NewMockBlockStore(ctrl *gomock.Controller) *MockBlockStore {
	mock := &MockBlockStore{ctrl: ctrl}
	mock.recorder = &MockBlockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockStore) EXPECT() *MockBlockStoreMockRecorder {
	return m.recorder
}

// AddBlock mocks base method.
func (m *MockBlockStore) AddBlock(arg0 *monomer.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBlock", arg0)
}

// AddBlock indicates an expected call of AddBlock.
func (mr *MockBlockStoreMockRecorder) AddBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockBlockStore)(nil).AddBlock), arg0)
}

// BlockByHash mocks base method.
func (m *MockBlockStore) BlockByHash(arg0 common.Hash) *monomer.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByHash", arg0)
	ret0, _ := ret[0].(*monomer.Block)
	return ret0
}

// BlockByHash indicates an expected call of BlockByHash.
func (mr *MockBlockStoreMockRecorder) BlockByHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByHash", reflect.TypeOf((*MockBlockStore)(nil).BlockByHash), arg0)
}

// BlockByNumber mocks base method.
func (m *MockBlockStore) BlockByNumber(arg0 int64) *monomer.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByNumber", arg0)
	ret0, _ := ret[0].(*monomer.Block)
	return ret0
}

// BlockByNumber indicates an expected call of BlockByNumber.
func (mr *MockBlockStoreMockRecorder) BlockByNumber(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByNumber", reflect.TypeOf((*MockBlockStore)(nil).BlockByNumber), arg0)
}

// HeadBlock mocks base method.
func (m *MockBlockStore) HeadBlock() *monomer.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadBlock")
	ret0, _ := ret[0].(*monomer.Block)
	return ret0
}

// HeadBlock indicates an expected call of HeadBlock.
func (mr *MockBlockStoreMockRecorder) HeadBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBlock", reflect.TypeOf((*MockBlockStore)(nil).HeadBlock))
}

// RollbackToHeight mocks base method.
func (m *MockBlockStore) RollbackToHeight(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackToHeight", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackToHeight indicates an expected call of RollbackToHeight.
func (mr *MockBlockStoreMockRecorder) RollbackToHeight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackToHeight", reflect.TypeOf((*MockBlockStore)(nil).RollbackToHeight), arg0)
}

// UpdateLabel mocks base method.
func (m *MockBlockStore) UpdateLabel(arg0 eth.BlockLabel, arg1 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLabel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLabel indicates an expected call of UpdateLabel.
func (mr *MockBlockStoreMockRecorder) UpdateLabel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLabel", reflect.TypeOf((*MockBlockStore)(nil).UpdateLabel), arg0, arg1)
}
